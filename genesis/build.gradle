version '0.0.1'

sourceSets.main.java.srcDirs = ["src"]

ext {
    modName = ModName + "Genesis"
    deployFileName = modName + "-" + version+ ".jar"
    desktopJarPath = layout.buildDirectory.get().toString() + "/libs/" + modName + "Desktop.jar"
    androidJarPath = layout.buildDirectory.get().toString() + "/libs/" + modName + "Android.jar"
}

tasks.register('jarAndroid') {
    dependsOn jar

    doLast {
        println("sdlRoot: ${sdkRoot}")
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${modName}Android.jar ${modName}Desktop.jar"
                .execute(null, new File("${layout.buildDirectory.get()}/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${modName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(projectDir){
        include "mod.hjson"
    }

    from("./assets"){
        include "**"
    }
}

tasks.register('deploy', Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = deployFileName

    from {
        [zipTree(desktopJarPath), zipTree(androidJarPath)]
    }

    doLast {
        delete desktopJarPath, androidJarPath
    }
}
}
